////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, steps) {
 var range = []; 
 if (start === end) {
   return [];
 }
 if(steps === undefined) {
  for (var i = start; i <= end; i++) {
    range.push(i); 
  } 
 } else {
   if (steps < 0) {
     return [];
   } else {
     for (var i = start; i <= end; i += steps) {
       range.push(i);
     }
   }
 }
 return range; 
}
 
////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array, summ=0) {
 // base 
  if (array.length === 0) {
    return summ; 
  }

 // recursion
 summ += array[0];
 return sum(array.slice(1), summ);
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
  let reverse = [];
  for (var i = array.length-1; i >= 0; i--) {
    reverse.push(array[i])
  }
  return reverse;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
for (var i = 0; i < Math.floor(array.length/2); i++) {
  [array[i], array[array.length-1-i]] = [array[array.length-1-i], array[i]];
}
return array; 
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  let rest = null; 
  for (var i = array.length - 1; i >= 0; i--) {
    rest = { value: array[i], rest };
  }
  return rest; 
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(obj, arr=[]) {
  // base
  if (obj.rest === null){
    arr.push(obj.value);
    return arr; 
  }

  // recursion
  arr.push(obj.value);
  return listToArray(obj.rest, arr);
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(element, list) {
  let listy = {
    value: element, 
    rest: list
  };
  return listy; 
};

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, n) {
// base
if (n < 0) {
  return undefined;
} else if (n === 0) {
  return list.value; 
}
// recursion
return nth(list.rest, n - 1);
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(x, y) {
  // determine if x AND y are both NOT objects
  if (typeof x !== "object" && typeof y !== "object") {
    return x === y; 
  }
  // determine if one of the values is not an object
  if (typeof x !== "object" || typeof y !== "object") {
    return false; 
  }
  // use the Object.key()method to create an array of keys for both values
  let xKeys = Object.keys(x); // ["a", "b"]
  let yKeys = Object.keys(y);// ["a", "b"]

  // determine if the length of the arrays don't match 
  if (xKeys.length !== yKeys.length) {
    return false;
  }
  // iterate through xKeys
  for (let i = 0; i < xKeys.length; i++) {
    if (!yKeys.includes(xKeys[i]) || !deepEqual(x[xKeys[i]], y[xKeys[i]])) {
      return false;
    }
  }
  return true; 
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
